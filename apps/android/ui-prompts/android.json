{
  "custom_view_base": "\n// KittDashboardView.java - Main custom view for KITT interface\npublic class KittDashboardView extends LinearLayout {\n    private KittScannerView scannerView;\n    private KittSpectrumView spectrumView;\n    private LinearLayout sideButtonsLayout;\n    private MediaPlayer mediaPlayer;\n    private AudioRecord audioRecord;\n\n    public KittDashboardView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init(context);\n    }\n\n    private void init(Context context) {\n        setOrientation(HORIZONTAL);\n        setBackgroundColor(Color.BLACK);\n\n        // Initialize components\n        initSideButtons(context);\n        initCenterPanel(context);\n        initAudioProcessing();\n    }\n\n    private void initSideButtons(Context context) {\n        sideButtonsLayout = new LinearLayout(context);\n        sideButtonsLayout.setOrientation(VERTICAL);\n        sideButtonsLayout.setBackgroundColor(Color.parseColor(\"#1a1a1a\"));\n\n        String[] buttonLabels = {\"AIR\", \"OIL\", \"P1\", \"P2\", \"S1\", \"S2\"};\n        int[] buttonColors = {Color.RED, Color.YELLOW, Color.GREEN, \n                             Color.BLUE, Color.CYAN, Color.MAGENTA};\n\n        for (int i = 0; i < buttonLabels.length; i++) {\n            KittButton button = new KittButton(context);\n            button.setText(buttonLabels[i]);\n            button.setButtonColor(buttonColors[i]);\n            button.setOnClickListener(v -> onKittButtonClick(buttonLabels[i]));\n\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(\n                ViewGroup.LayoutParams.MATCH_PARENT, 0, 1.0f);\n            params.setMargins(4, 4, 4, 4);\n            sideButtonsLayout.addView(button, params);\n        }\n\n        addView(sideButtonsLayout);\n    }\n\n    private void initCenterPanel(Context context) {\n        LinearLayout centerPanel = new LinearLayout(context);\n        centerPanel.setOrientation(VERTICAL);\n        centerPanel.setBackgroundColor(Color.BLACK);\n\n        // KITT Scanner (oscillating red lights)\n        scannerView = new KittScannerView(context);\n        centerPanel.addView(scannerView);\n\n        // Spectrum Analyzer\n        spectrumView = new KittSpectrumView(context);\n        centerPanel.addView(spectrumView);\n\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(\n            0, ViewGroup.LayoutParams.MATCH_PARENT, 2.0f);\n        addView(centerPanel, params);\n    }\n}",
  "kitt_button": "\n// KittButton.java - Custom button with KITT styling\npublic class KittButton extends View {\n    private Paint paint;\n    private Paint textPaint;\n    private String text = \"\";\n    private int buttonColor = Color.RED;\n    private boolean isPressed = false;\n    private boolean isGlowing = false;\n    private ValueAnimator glowAnimator;\n\n    public KittButton(Context context) {\n        super(context);\n        init();\n    }\n\n    private void init() {\n        paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n        textPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n        textPaint.setColor(Color.WHITE);\n        textPaint.setTextAlign(Paint.Align.CENTER);\n        textPaint.setTextSize(24);\n        textPaint.setTypeface(Typeface.create(\"monospace\", Typeface.BOLD));\n\n        setupGlowAnimation();\n        setClickable(true);\n    }\n\n    private void setupGlowAnimation() {\n        glowAnimator = ValueAnimator.ofFloat(0.3f, 1.0f);\n        glowAnimator.setDuration(800);\n        glowAnimator.setRepeatMode(ValueAnimator.REVERSE);\n        glowAnimator.setRepeatCount(ValueAnimator.INFINITE);\n        glowAnimator.addUpdateListener(animation -> {\n            float alpha = (Float) animation.getAnimatedValue();\n            paint.setAlpha((int) (255 * alpha));\n            invalidate();\n        });\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n\n        int width = getWidth();\n        int height = getHeight();\n\n        // Draw button background\n        paint.setColor(buttonColor);\n        if (isGlowing || isPressed) {\n            paint.setShadowLayer(15, 0, 0, buttonColor);\n        } else {\n            paint.setShadowLayer(5, 0, 0, buttonColor);\n        }\n\n        RectF rect = new RectF(8, 8, width - 8, height - 8);\n        canvas.drawRoundRect(rect, 8, 8, paint);\n\n        // Draw border\n        paint.setStyle(Paint.Style.STROKE);\n        paint.setStrokeWidth(2);\n        paint.setColor(Color.WHITE);\n        canvas.drawRoundRect(rect, 8, 8, paint);\n        paint.setStyle(Paint.Style.FILL);\n\n        // Draw text\n        canvas.drawText(text, width / 2f, height / 2f + 8, textPaint);\n    }\n\n    public void setText(String text) {\n        this.text = text;\n        invalidate();\n    }\n\n    public void setButtonColor(int color) {\n        this.buttonColor = color;\n        invalidate();\n    }\n\n    public void startGlow() {\n        isGlowing = true;\n        glowAnimator.start();\n    }\n\n    public void stopGlow() {\n        isGlowing = false;\n        glowAnimator.cancel();\n        invalidate();\n    }\n}",
  "kitt_scanner": "\n// KittScannerView.java - Oscillating red scanner like KITT's voice box\npublic class KittScannerView extends View {\n    private Paint paint;\n    private float scannerPosition = 0;\n    private ValueAnimator scannerAnimator;\n    private int numLeds = 20;\n    private float ledWidth;\n    private boolean isScanning = false;\n\n    public KittScannerView(Context context) {\n        super(context);\n        init();\n    }\n\n    private void init() {\n        paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n        setupScannerAnimation();\n        setBackgroundColor(Color.parseColor(\"#0a0a0a\"));\n    }\n\n    private void setupScannerAnimation() {\n        scannerAnimator = ValueAnimator.ofFloat(0, numLeds - 1);\n        scannerAnimator.setDuration(1000);\n        scannerAnimator.setRepeatMode(ValueAnimator.REVERSE);\n        scannerAnimator.setRepeatCount(ValueAnimator.INFINITE);\n        scannerAnimator.setInterpolator(new AccelerateDecelerateInterpolator());\n        scannerAnimator.addUpdateListener(animation -> {\n            scannerPosition = (Float) animation.getAnimatedValue();\n            invalidate();\n        });\n    }\n\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        ledWidth = (float) w / numLeds;\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n\n        int height = getHeight();\n        int centerY = height / 2;\n        int ledHeight = height - 20;\n\n        for (int i = 0; i < numLeds; i++) {\n            float x = i * ledWidth + ledWidth / 2;\n            float distance = Math.abs(i - scannerPosition);\n\n            // Calculate LED intensity based on distance from scanner\n            float intensity = Math.max(0, 1.0f - distance / 3.0f);\n\n            if (intensity > 0) {\n                int red = (int) (255 * intensity);\n                paint.setColor(Color.rgb(red, 0, 0));\n                paint.setShadowLayer(10 * intensity, 0, 0, Color.RED);\n\n                RectF ledRect = new RectF(\n                    x - ledWidth / 3,\n                    centerY - ledHeight / 2,\n                    x + ledWidth / 3,\n                    centerY + ledHeight / 2\n                );\n                canvas.drawRoundRect(ledRect, 4, 4, paint);\n            }\n        }\n    }\n\n    public void startScanning() {\n        if (!isScanning) {\n            isScanning = true;\n            scannerAnimator.start();\n        }\n    }\n\n    public void stopScanning() {\n        if (isScanning) {\n            isScanning = false;\n            scannerAnimator.cancel();\n            invalidate();\n        }\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int width = MeasureSpec.getSize(widthMeasureSpec);\n        int height = 80; // Fixed height for scanner\n        setMeasuredDimension(width, height);\n    }\n}",
  "spectrum_analyzer": "\n// KittSpectrumView.java - Audio spectrum analyzer with KITT styling\npublic class KittSpectrumView extends View {\n    private Paint paint;\n    private float[] magnitudes;\n    private int numBars = 32;\n    private float barWidth;\n    private AudioRecord audioRecord;\n    private boolean isRecording = false;\n    private Thread recordingThread;\n    private FFT fft;\n\n    public KittSpectrumView(Context context) {\n        super(context);\n        init();\n    }\n\n    private void init() {\n        paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n        magnitudes = new float[numBars];\n        fft = new FFT(1024); // FFT size\n        setBackgroundColor(Color.parseColor(\"#0a0a0a\"));\n    }\n\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        barWidth = (float) w / numBars;\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n\n        int height = getHeight();\n        float maxHeight = height - 20;\n\n        for (int i = 0; i < numBars; i++) {\n            float x = i * barWidth;\n            float barHeight = magnitudes[i] * maxHeight;\n\n            // KITT-style color gradient (red to yellow based on intensity)\n            float intensity = magnitudes[i];\n            int red = 255;\n            int green = (int) (255 * intensity);\n            int blue = 0;\n\n            paint.setColor(Color.rgb(red, green, blue));\n            paint.setShadowLayer(8, 0, 0, Color.rgb(red, green, blue));\n\n            RectF barRect = new RectF(\n                x + 2,\n                height - barHeight - 10,\n                x + barWidth - 2,\n                height - 10\n            );\n            canvas.drawRoundRect(barRect, 2, 2, paint);\n        }\n    }\n\n    public void startVisualization() {\n        if (!isRecording && checkAudioPermission()) {\n            isRecording = true;\n            startAudioCapture();\n        }\n    }\n\n    public void stopVisualization() {\n        isRecording = false;\n        if (audioRecord != null) {\n            audioRecord.stop();\n            audioRecord.release();\n            audioRecord = null;\n        }\n    }\n\n    private boolean checkAudioPermission() {\n        return ContextCompat.checkSelfPermission(getContext(), \n            Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED;\n    }\n\n    private void startAudioCapture() {\n        int bufferSize = AudioRecord.getMinBufferSize(\n            44100, \n            AudioFormat.CHANNEL_IN_MONO,\n            AudioFormat.ENCODING_PCM_16BIT\n        );\n\n        audioRecord = new AudioRecord(\n            MediaRecorder.AudioSource.MIC,\n            44100,\n            AudioFormat.CHANNEL_IN_MONO,\n            AudioFormat.ENCODING_PCM_16BIT,\n            bufferSize\n        );\n\n        audioRecord.startRecording();\n\n        recordingThread = new Thread(() -> {\n            short[] buffer = new short[1024];\n            double[] fftBuffer = new double[1024];\n\n            while (isRecording && audioRecord.getRecordingState() == AudioRecord.RECORDSTATE_RECORDING) {\n                int read = audioRecord.read(buffer, 0, buffer.length);\n\n                if (read > 0) {\n                    // Convert to double for FFT\n                    for (int i = 0; i < buffer.length; i++) {\n                        fftBuffer[i] = buffer[i] / 32768.0;\n                    }\n\n                    // Perform FFT\n                    fft.realForward(fftBuffer);\n\n                    // Calculate magnitudes for visualization\n                    updateMagnitudes(fftBuffer);\n\n                    // Update UI\n                    post(this::invalidate);\n                }\n            }\n        });\n        recordingThread.start();\n    }\n\n    private void updateMagnitudes(double[] fftData) {\n        for (int i = 0; i < numBars; i++) {\n            int index = i * 2; // Real part of FFT\n            if (index < fftData.length) {\n                double real = fftData[index];\n                double imag = (index + 1 < fftData.length) ? fftData[index + 1] : 0;\n                double magnitude = Math.sqrt(real * real + imag * imag);\n\n                // Normalize and smooth\n                magnitudes[i] = (float) Math.min(1.0, magnitude * 10);\n            }\n        }\n    }\n}",
  "activity_layout": "\n<!-- activity_main.xml -->\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"#000000\">\n\n    <TextView\n        android:id=\"@+id/titleText\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_marginTop=\"16dp\"\n        android:text=\"KNIGHT INDUSTRIES 2000\"\n        android:textColor=\"#FF0000\"\n        android:textSize=\"20sp\"\n        android:textStyle=\"bold\"\n        android:fontFamily=\"monospace\" />\n\n    <com.yourpackage.KittDashboardView\n        android:id=\"@+id/kittDashboard\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_below=\"@id/titleText\"\n        android:layout_margin=\"16dp\" />\n\n</RelativeLayout>",
  "main_activity": "\n// MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n    private KittDashboardView kittDashboard;\n    private static final int PERMISSION_REQUEST_CODE = 1001;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Hide system UI for immersive experience\n        getWindow().setFlags(\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\n            WindowManager.LayoutParams.FLAG_FULLSCREEN\n        );\n\n        kittDashboard = findViewById(R.id.kittDashboard);\n\n        // Request audio permission\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) \n                != PackageManager.PERMISSION_GRANTED) {\n            ActivityCompat.requestPermissions(this,\n                new String[]{Manifest.permission.RECORD_AUDIO},\n                PERMISSION_REQUEST_CODE);\n        } else {\n            initializeKitt();\n        }\n    }\n\n    private void initializeKitt() {\n        // Start KITT systems\n        kittDashboard.startSystems();\n\n        // Play KITT startup sound (optional)\n        MediaPlayer startupSound = MediaPlayer.create(this, R.raw.kitt_startup);\n        if (startupSound != null) {\n            startupSound.start();\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if (requestCode == PERMISSION_REQUEST_CODE) {\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                initializeKitt();\n            }\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        if (kittDashboard != null) {\n            kittDashboard.stopSystems();\n        }\n    }\n}",
  "manifest_permissions": "\n<!-- Add to AndroidManifest.xml -->\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n<uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\" />",
  "dependencies": "\n// Add to app/build.gradle dependencies\ndependencies {\n    implementation 'androidx.appcompat:appcompat:1.6.1'\n    implementation 'androidx.core:core:1.10.1'\n\n    // For FFT processing\n    implementation 'org.apache.commons:commons-math3:3.6.1'\n\n    // For advanced audio processing (optional)\n    implementation 'com.github.wendykierp:JTransforms:3.1'\n}"
}
